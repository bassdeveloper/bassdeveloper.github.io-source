Title: 12 Factor App
Date: 2017-01-25 14:53
Modified: 2017-01-25 14:53
Category: Learning
Tags: App-dev, 12factor
Slug: 12factor
Authors: Rishabh Chakrabarti
Summary: Learnt about 12-Factor App from NPM module information. Liked it. Decided to simply move forward with my version/summary.
Status:draft


# What are the 12 Commandments?

In the modern era, software is  commonly delivered as a service: called **Web Apps**, or *Software-as-a-Service*.

The 12 factor app  is a methodology for building software-as-a-service apps that:

* Use **declarative** formats for setup automation, to minimize time and cost for new developers joining the project

>  Declarative programming is when you write your code in such a way that it describes what you want to do, and not how you want to do it. It is left up to the compiler to  figure out how.

> Example: SQL, Prolog.

* Have a **clean contract** with the underlying operating system, offering maximum portability between execution environments

* Are suitable for **deployment** on modern cloud platforms, obviating the need for servers and systems administration;

* Minimize divergence between development and production, enabling continuous deployment for maximum agility;

* And can **scale up** without significant changes to tooling, architecture, or development practices.

## Codebase

> One codebase tracked in revision control, many deploys

A 12FA is always tracked in a version control system, such as *Git, Mercurial, or Subversion*.

A copy of the revision tracking database is known as a **code repository**, often shortened to *code repo* or just *repo*.

A *codebase* is any single repo (in a centralized revision control system like Subversion), or any set of repos who share a root commit (in a decentralized revision control system like Git).

![codebase]({filename}/assets/2012-01-25-12FactorApp-4ddaf.png)

There is always a one-to-one correlation between the codebase and the app:

> If there are multiple codebase, it's not an app - it's a distributed system.

* Each component in a distributed system is an app, and each can individually comply with twelve-factor.

> Multiple apps sharing the same code is a violation of twelve-factor.

* The solution here is to factor shared code into libraries which can be included through the dependency manager.

There is only one *code base* per app, but there will be many deploys of the app.

A *deploy* is a running instance of the app.

**This is typically a production site, and one or more staging sites.**

* Additionally, every developer has a copy of the app running in their local development environment, each of which also qualifies as a deploy.

The *code base* is the same across all deploys, although different versions may be active in each deploy.

For example, a developer has some commits not yet deployed to staging; staging has some commits not yet deployed to production. But they all share the same *code base*, thus making them identifiable as different deploys of the same app.

## Dependencies

>Explicitly declare and isolate dependencies

Most programming languages offer a packaging system for distributing support libraries, such as **CPAN for Perl** or **Rubygems for Ruby**. Libraries installed through a packaging system can be installed system-wide (known as "site packages") or scoped into the directory containing the app ( known as *"vendoring"* or *"bundling"* ).

**A 12FA never relies on implicit existence of system-wide packages**.

It declares all dependencies, completely and exactly, via a *dependency declaration** manifest.

Furthermore, it uses a **dependency isolation** tool during execution to ensure that no implicit dependencies "leak in" from the surrounding system.

The full and explicit dependency specification is applied uniformly to both production and development.

For example,
* **Bundler for Ruby** offers the `Gemfile` manifest format for dependency declaration and `bundle exec` for dependency isolation.

* In Python, there are 2 separate tools for these steps - `pip` is used for declaration and `virtualenv` for isolation.

* Even C has `Autoconf` for dependency declaration and static linking can provide isolation.

> No matter what the toolchain, dependency declaration and isolation must always be used together - only one or the other is not sufficient to satisfy 12FA.




## App Testing and Continuous Integration.

### TRAVIS-CI
Travis CI provides a default build environment and a default set of steps for each programming language. You can customize any step in this process in `.travis.yml`. Travis CI uses `.travis.yml` file in the root of your repository to learn about your project and how you want your builds to be executed. .travis.yml can be very minimalistic or have a lot of customization in it. A few examples of what kind of information your .travis.yml file may have:

What programming language your project uses
What commands or scripts you want to be executed before each build (for example, to install or clone your projectâ€™s dependencies)
What command is used to run your test suite
Emails, Campfire and IRC rooms to notify about build failures
